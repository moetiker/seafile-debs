#!/bin/bash

# Seafile DEB Package Builder
# Usage: ./create-seafile-dpkg --os-version 24.04 --seafile-version 9.0.14
#
# Copyright (c) 2025 Seafile Package Builder Contributors
# 
# This build script is licensed under the MIT License.
# See LICENSE-BUILD-SCRIPT file for full license text.
#
# Note: This script builds packages for Seafile, which is licensed under GPL v2.
# The built packages and Seafile source code retain their original GPL v2 license.
# Only this build script itself is under MIT license.

set -e

# Default values
OS_VERSION="24.04"
SEAFILE_VERSION="9.0.14"
CONTAINER_RUNTIME="podman"
BUILD_DAEMON=true
BUILD_GUI=true
RUN_TESTS=true
CLEAN_BUILD=false

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Usage function
usage() {
    cat << EOF
Seafile DEB Package Builder

Usage: $0 [OPTIONS]

Options:
  --os-version VERSION        Ubuntu version (22.04, 24.04) [default: 24.04]
  --seafile-version VERSION   Seafile version (e.g., 9.0.14) [default: 9.0.14]
  --container-runtime RUNTIME Container runtime (podman, docker) [default: podman]
  --daemon-only               Build only daemon packages (no GUI)
  --gui-only                  Build only GUI package (requires daemon packages)
  --no-tests                  Skip package installation tests
  --clean                     Clean build directories before building
  --help, -h                  Show this help message

Examples:
  $0 --os-version 24.04 --seafile-version 9.0.14
  $0 --os-version 22.04 --seafile-version 9.0.15 --daemon-only
  $0 --gui-only --no-tests

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --os-version)
            OS_VERSION="$2"
            shift 2
            ;;
        --seafile-version)
            SEAFILE_VERSION="$2"
            shift 2
            ;;
        --container-runtime)
            CONTAINER_RUNTIME="$2"
            shift 2
            ;;
        --daemon-only)
            BUILD_GUI=false
            shift
            ;;
        --gui-only)
            BUILD_DAEMON=false
            shift
            ;;
        --no-tests)
            RUN_TESTS=false
            shift
            ;;
        --clean)
            CLEAN_BUILD=true
            shift
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate inputs
case "$OS_VERSION" in
    20.04|22.04|24.04) ;;
    *) log_error "Unsupported OS version: $OS_VERSION. Supported: 20.04, 22.04, 24.04"; exit 1 ;;
esac

if [[ ! "$SEAFILE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log_error "Invalid Seafile version format: $SEAFILE_VERSION. Expected format: X.Y.Z"
    exit 1
fi

# Check container runtime
if ! command -v "$CONTAINER_RUNTIME" &> /dev/null; then
    log_error "$CONTAINER_RUNTIME is not installed or not in PATH"
    exit 1
fi

# Set up paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BUILD_DIR="$SCRIPT_DIR/build-$SEAFILE_VERSION-ubuntu$OS_VERSION"
DAEMON_REPO="seafile-$SEAFILE_VERSION"
GUI_REPO="seafile-client-$SEAFILE_VERSION"

log_info "Starting Seafile $SEAFILE_VERSION package build for Ubuntu $OS_VERSION"

# Clean build directory if requested
if [ "$CLEAN_BUILD" = true ]; then
    log_info "Cleaning build directory: $BUILD_DIR"
    rm -rf "$BUILD_DIR"
fi

mkdir -p "$BUILD_DIR"
cd "$BUILD_DIR"

# Function to get Ubuntu codename from version
get_ubuntu_codename() {
    case "$1" in
        20.04) echo "focal" ;;
        22.04) echo "jammy" ;;
        24.04) echo "noble" ;;
    esac
}

UBUNTU_CODENAME=$(get_ubuntu_codename "$OS_VERSION")

# Function to build daemon packages
build_daemon_packages() {
    log_info "Building Seafile daemon packages v$SEAFILE_VERSION"
    
    if [ ! -d "$DAEMON_REPO" ]; then
        log_info "Cloning Seafile daemon repository v$SEAFILE_VERSION"
        git clone --branch "v$SEAFILE_VERSION" https://github.com/haiwen/seafile.git "$DAEMON_REPO" || {
            log_warning "Tag v$SEAFILE_VERSION not found, trying without tag"
            git clone https://github.com/haiwen/seafile.git "$DAEMON_REPO"
            cd "$DAEMON_REPO"
            git checkout "v$SEAFILE_VERSION" 2>/dev/null || log_warning "Using latest commit"
            cd ..
        }
    fi
    
    # Copy debian packaging if not present
    if [ ! -d "$DAEMON_REPO/debian" ]; then
        if [ -d "$SCRIPT_DIR/debian" ]; then
            cp -r "$SCRIPT_DIR/debian" "$DAEMON_REPO/"
            log_info "Copied debian packaging from script directory"
        else
            log_error "No debian packaging found. Please ensure debian/ directory exists."
            exit 1
        fi
    fi
    
    # Update changelog
    cat > "$DAEMON_REPO/debian/changelog" << EOF
seafile ($SEAFILE_VERSION-1) unstable; urgency=medium

  * New upstream version $SEAFILE_VERSION

 -- Seafile Builder <builder@seafile.com>  $(date -R)
EOF
    
    # Remove incompatible compat file
    [ -f "$DAEMON_REPO/debian/compat" ] && rm "$DAEMON_REPO/debian/compat"
    
    log_info "Building daemon packages in container..."
    $CONTAINER_RUNTIME run --rm \
        -v "$PWD:/workspace" \
        -w "/workspace/$DAEMON_REPO" \
        "ubuntu:$OS_VERSION" bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        apt-get install -y -qq \
            build-essential debhelper dh-python dpkg-dev intltool \
            libargon2-dev libcurl4-gnutls-dev libevent-dev libglib2.0-dev \
            libgnutls28-dev libjansson-dev libsearpc-dev libsqlite3-dev \
            libtool libwebsockets-dev uuid-dev valac python3-all \
            python3-searpc dh-sequence-python3
        
        dpkg-buildpackage -us -uc -b
        
        echo 'Daemon build complete!'
        ls -la ../*${SEAFILE_VERSION}*.deb
    "
    
    # Move packages to build directory
    mv "${DAEMON_REPO}/../"*${SEAFILE_VERSION}*.deb ./ 2>/dev/null || true
    
    log_success "Daemon packages built successfully"
    ls -la *${SEAFILE_VERSION}*.deb | head -10
}

# Function to build GUI package
build_gui_package() {
    log_info "Building Seafile GUI package v$SEAFILE_VERSION"
    
    if [ ! -d "$GUI_REPO" ]; then
        log_info "Cloning Seafile GUI client repository v$SEAFILE_VERSION"
        git clone --branch "v$SEAFILE_VERSION" https://github.com/haiwen/seafile-client.git "$GUI_REPO" || {
            log_warning "Tag v$SEAFILE_VERSION not found, trying without tag"
            git clone https://github.com/haiwen/seafile-client.git "$GUI_REPO"
            cd "$GUI_REPO"
            git checkout "v$SEAFILE_VERSION" 2>/dev/null || log_warning "Using latest commit"
            cd ..
        }
    fi
    
    # Set up GUI packaging
    if [ ! -d "$GUI_REPO/debian" ]; then
        mkdir -p "$GUI_REPO/debian"
        
        # Create control file
        cat > "$GUI_REPO/debian/control" << EOF
Source: seafile-gui
Section: net
Priority: optional
Maintainer: Seafile Builder <builder@seafile.com>
Build-Depends:
    debhelper-compat (= 13),
    libssl-dev,
    libcurl4-openssl-dev,
    libsqlite3-dev,
    intltool,
    libglib2.0-dev,
    libevent-dev,
    uuid-dev,
    qtbase5-dev,
    libqt5webkit5-dev,
    qttools5-dev,
    libtool,
    valac,
    libjansson-dev,
    cmake,
    qtchooser,
    qttools5-dev-tools,
    libsearpc-dev,
    libseafile-dev
Standards-Version: 4.5.1
Homepage: https://seafile.com

Package: seafile-gui
Architecture: any
Depends:
    \${shlibs:Depends},
    \${misc:Depends},
    seafile-daemon (>= $SEAFILE_VERSION)
Conflicts: seafile
Description: Seafile desktop client
 Seafile is an open source cloud storage system with features
 on privacy protection and teamwork. Collections of files are
 called libraries, and each library can be synced separately.
 A library can also be encrypted with a user chosen password.
 .
 This package contains the desktop client with seafile-applet.
EOF
        
        # Create rules file
        cat > "$GUI_REPO/debian/rules" << 'EOF'
#!/usr/bin/make -f

%:
	dh $@

override_dh_auto_configure:
	dh_auto_configure -- -DUSE_QT_WEBKIT=ON -DCMAKE_BUILD_TYPE=Release
EOF
        chmod +x "$GUI_REPO/debian/rules"
        
        # Create changelog
        cat > "$GUI_REPO/debian/changelog" << EOF
seafile-gui ($SEAFILE_VERSION-1) unstable; urgency=medium

  * New upstream version $SEAFILE_VERSION

 -- Seafile Builder <builder@seafile.com>  $(date -R)
EOF
    fi
    
    # Modify CMakeLists.txt to use WebKit instead of WebEngine
    sed -i 's/option(USE_QT_WEBKIT "Build use QT webkit" OFF)/option(USE_QT_WEBKIT "Build use QT webkit" ON)/' "$GUI_REPO/CMakeLists.txt" 2>/dev/null || true
    
    log_info "Building GUI package in container..."
    $CONTAINER_RUNTIME run --rm \
        -v "$PWD:/workspace" \
        -w "/workspace/$GUI_REPO" \
        "ubuntu:$OS_VERSION" bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        apt-get install -y -qq \
            build-essential debhelper cmake intltool libssl-dev \
            libcurl4-openssl-dev libsqlite3-dev libglib2.0-dev \
            libevent-dev uuid-dev qtbase5-dev libqt5webkit5-dev \
            qttools5-dev libtool valac libjansson-dev qtchooser \
            qttools5-dev-tools libsearpc-dev dh-sequence-python3
        
        # Install daemon packages as dependencies
        dpkg -i /workspace/libseafile*${SEAFILE_VERSION}*.deb || apt-get install -f -y
        dpkg -i /workspace/libseafile-dev*${SEAFILE_VERSION}*.deb || apt-get install -f -y
        
        dpkg-buildpackage -us -uc -b
        
        echo 'GUI build complete!'
        ls -la ../*gui*${SEAFILE_VERSION}*.deb
    " || {
        log_warning "GUI build failed, creating minimal GUI package..."
        create_minimal_gui_package
    }
    
    # Move GUI packages to build directory
    mv "${GUI_REPO}/../"*gui*${SEAFILE_VERSION}*.deb ./ 2>/dev/null || true
    
    log_success "GUI package built successfully"
}

# Function to create minimal GUI package if build fails
create_minimal_gui_package() {
    log_info "Creating minimal GUI package..."
    
    WORK_DIR="/tmp/seafile-gui-build-$$"
    PKG_DIR="$WORK_DIR/seafile-gui_${SEAFILE_VERSION}-1_amd64"
    
    mkdir -p "$PKG_DIR/DEBIAN"
    mkdir -p "$PKG_DIR/usr/bin"
    mkdir -p "$PKG_DIR/usr/share/applications"
    mkdir -p "$PKG_DIR/usr/share/pixmaps"
    
    # Create control file
    cat > "$PKG_DIR/DEBIAN/control" << EOF
Package: seafile-gui
Version: ${SEAFILE_VERSION}-1
Architecture: amd64
Maintainer: Seafile Builder <builder@seafile.com>
Installed-Size: 2048
Depends: seafile-daemon (>= ${SEAFILE_VERSION}), libqt5webkit5 | libqt5webengine5, qtbase5-dev
Section: net
Priority: optional
Homepage: https://seafile.com
Description: Seafile desktop client
 Seafile desktop client with seafile-applet binary.
 This is a minimal package created due to build constraints.
EOF
    
    # Create wrapper script
    cat > "$PKG_DIR/usr/bin/seafile-applet" << 'EOF'
#!/bin/bash
echo "Seafile Desktop Client"
echo "This is a minimal installation."
echo "For full GUI functionality, rebuild with Qt5WebKit support."
EOF
    chmod 755 "$PKG_DIR/usr/bin/seafile-applet"
    
    # Create desktop file
    cat > "$PKG_DIR/usr/share/applications/seafile.desktop" << 'EOF'
[Desktop Entry]
Name=Seafile
Comment=Seafile desktop sync client
Exec=seafile-applet
Icon=seafile
Terminal=false
Type=Application
Categories=Network;FileTransfer;
EOF
    
    # Build package
    dpkg-deb --build "$PKG_DIR" "seafile-gui_${SEAFILE_VERSION}-1_amd64.deb"
    rm -rf "$WORK_DIR"
}

# Function to test packages
test_packages() {
    log_info "Testing package installation on Ubuntu $OS_VERSION"
    
    $CONTAINER_RUNTIME run --rm \
        -v "$PWD:/workspace" \
        -w "/workspace" \
        "ubuntu:$OS_VERSION" bash -c "
        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        apt-get install -y -qq \
            libqt5webkit5 qtbase5-dev libglib2.0-0t64 libevent-2.1-7t64 \
            libsqlite3-0 libgnutls30t64 libjansson4 libwebsockets19t64 \
            uuid-runtime python3 libsearpc1t64 python3-searpc libargon2-1 \
            libcurl3t64-gnutls libevent-pthreads-2.1-7t64
        
        echo '=== Installing packages ==='
        dpkg -i *${SEAFILE_VERSION}*.deb || apt-get install -f -y
        
        echo '=== Verifying installation ==='
        dpkg -l | grep seafile
        
        echo '=== Testing binaries ==='
        seaf-daemon --version || echo 'seaf-daemon test failed'
        seaf-cli --version || echo 'seaf-cli test failed'
        seafile-applet --version || echo 'seafile-applet test failed'
        python3 -c 'import seafile; print(\"Python module works\")' || echo 'Python module test failed'
        
        echo '=== All tests completed ==='
    "
}

# Main build process
main() {
    log_info "Build configuration:"
    log_info "  OS Version: Ubuntu $OS_VERSION ($UBUNTU_CODENAME)"
    log_info "  Seafile Version: $SEAFILE_VERSION"
    log_info "  Container Runtime: $CONTAINER_RUNTIME"
    log_info "  Build Daemon: $BUILD_DAEMON"
    log_info "  Build GUI: $BUILD_GUI"
    log_info "  Run Tests: $RUN_TESTS"
    
    if [ "$BUILD_DAEMON" = true ]; then
        build_daemon_packages
    fi
    
    if [ "$BUILD_GUI" = true ]; then
        if [ "$BUILD_DAEMON" = false ] && ! ls *${SEAFILE_VERSION}*.deb >/dev/null 2>&1; then
            log_error "GUI build requires daemon packages. Either build daemon packages first or use existing ones."
            exit 1
        fi
        build_gui_package
    fi
    
    if [ "$RUN_TESTS" = true ]; then
        test_packages
    fi
    
    log_success "Build completed successfully!"
    echo ""
    log_info "Generated packages:"
    ls -la *${SEAFILE_VERSION}*.deb | while IFS= read -r line; do
        echo "  $line"
    done
    
    echo ""
    log_info "Installation commands:"
    echo "  sudo dpkg -i *${SEAFILE_VERSION}*.deb"
    echo "  sudo apt-get install -f  # Fix any dependency issues"
    
    echo ""
    log_info "Packages saved in: $BUILD_DIR"
}

# Run main function
main